@using Trikotazo_Parduotuve.Repositories
@using Trikotazo_Parduotuve.Entities
@inject KategorijaRepository kategorijaRepository
@inject AtaskaitaRepository ataskaitaRepository
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@page "/Ataskaita"


<h1>Ataskaita</h1>

@if(filterFormIsVisible && kategorijos != null)
{
    <p>Pasirinkite filtravimo kriterijus, pagal kuriuos bus išfiltruotos kategorijai priklausančios subkategorijos. Po kiekviena iš pastarųjų bus pateiktas į kainos intervalą įeinantis trikotažas</p>
    <EditForm Model="model" OnValidSubmit="Filter" FormName="AtaskaitaForm">
        <div class="form-group">
            <label>
                Pasirinkite kategoriją:
            </label>
            <InputSelect @bind-Value="model.Kategorija" class="form-control" style="width:200px">
                @foreach (Kategorija kategorija in kategorijos)
                {
                    <option value="@kategorija.Pav">@kategorija.Pav</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>
                Pasirinkite lytį:
            </label>
            <InputSelect @bind-Value="model.Lytis" class="form-control" style="width:200px">
                @foreach (Lytis lytis in Enum.GetValues(typeof(Lytis)))
                {
                    <option value="@lytis">@lytis</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>
                Pasirinkite min kainą:
            </label>
            <InputNumber class="form-control" @bind-Value="@model.MinKaina" style="width:200px" />
        </div>

        <div class="form-group">
            <label>
                Pasirinkite max kainą:
            </label>
            <InputNumber class="form-control" @bind-Value="@model.MaxKaina" style="width:200px" />
        </div>
        <br/>
        <button type="submit">Kurti ataskaitą</button>
    </EditForm>
}
else if(topics != null)
{
    <h2 style="margin-top:20px;margin-bottom:20px"><i>@model.Kategorija @model.Lytis nuo @model.MinKaina € iki @model.MaxKaina €</i></h2>
    @foreach(AtaskaitaTopic topic in topics)
    {
        <h3>@topic.Subkategorija (@topic.Trikotazo_count)</h3>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th scope="col">Pavadinimas</th>
                    <th scope="col">Kaina</th>
                    <th scope="col">Medžiaga</th>
                    <th scope="col">Dydis</th>
                    <th scope="col">Spalva</th>
                    <th scope="col">Kiekis</th>
                    <th scope="col">Tiekėjas</th>
                </tr>
            </thead>
            <tbody>
                @if(index < entries.Count)
                {
                    @foreach(AtaskaitaEntry entry in entries[index++])
                    {
                        <tr>
                            <td>@entry.Pavadinimas</td>
                            <td>@entry.Kaina</td>
                            <td>@entry.Medziaga</td>
                            <td>@entry.Dydis</td>
                            <td>@entry.Spalva</td>
                            <td>@entry.Kiekis</td>
                            <td>@entry.Tiekejas</td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="5" style="text-align:right"><strong>Iš viso:</strong></td>
                    <td><strong>@topic.Bendras_trikotazo_kiekis</strong></td>
                    <td></td>
                </tr>
            </tfoot>
        </table>
    }
    <button @onclick="() => GoToAtaskaitaPage()" style="float:left;margin:20px;margin-left:0px">Kurti naują ataskaitą</button>
}
@if(errorMessageIsVisible)
{
    <p style="margin-top:20px;color:red">Pagal pasirinktus kriterijus nepavyko rasti trikotažo...</p>
}

@code {
    private bool filterFormIsVisible = true;
    private bool errorMessageIsVisible = false;
    private List<Kategorija> kategorijos;
    private List<AtaskaitaTopic> topics;
    private List<List<AtaskaitaEntry>> entries;
    public FilterModel model;
    private int index;

    protected override async Task OnInitializedAsync()
    {
        model = new FilterModel();
        kategorijos = await kategorijaRepository.GetAllAsync();
        model.Lytis = Lytis.moterims;
        model.Kategorija= kategorijos.First().Pav;
        entries = new List<List<AtaskaitaEntry>>();
        index = 0;
    }

    private async Task Filter()
    {
        if (model.MinKaina >= 0 && model.MinKaina <= model.MaxKaina)
        {
            try
            {
                topics = await ataskaitaRepository.GetAllTopics(model.Kategorija, model.Lytis, model.MinKaina, model.MaxKaina);
                foreach (AtaskaitaTopic topic in topics)
                {
                    entries.Add(await GetEntriesForTopic(topic));
                }
                errorMessageIsVisible = false;
                filterFormIsVisible = false;
            }
            catch(Exception e)
            {
                errorMessageIsVisible = true;
            }
        }
    }
    public async Task<List<AtaskaitaEntry>> GetEntriesForTopic(AtaskaitaTopic topic)
    {
        List<AtaskaitaEntry> res = await ataskaitaRepository.GetEntriesByTopic(topic.Subkategorija, model.Lytis, model.MinKaina, model.MaxKaina);
        return res;
    }

    public void GoToAtaskaitaPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }

    public class FilterModel
    {
        public FilterModel()
        {
        }

        public FilterModel(Lytis lytis, string kategorija, float minKaina, float maxKaina)
        {
            this.Lytis = lytis;
            this.Kategorija = kategorija;
            this.MinKaina = minKaina;
            this.MaxKaina = maxKaina;
        }

        public Lytis Lytis { get; set; }
        public string Kategorija { get; set; }
        public float MinKaina { get; set; } = 0;
        public float MaxKaina { get; set; } = 100;
    }
}
