@using Trikotazo_Parduotuve.Repositories
@using Trikotazo_Parduotuve.Entities
@inject KategorijaRepository kategorijaRepository
@inject AtaskaitaRepository ataskaitaRepository
@rendermode InteractiveServer
@page "/Ataskaita"

<h3>Ataskaita</h3>
<p>Sudaro trikotažo ataskaitą, kurią filtruoja pagal  (Kategorija) kategoriją, (Subkategorija) lytį, (Trikotazas) max ir min kainos?</p>
<p>Pirma atrenka visas subkategorijas (bei subkategorijoje esančio trikotažo skaičių su Count funkcija) su viena užklausa</p>
<p>Tada su kita atrenka visą subkategorijai priklausantį trikotažą (galima panaudoti left/right join, kad prijungčiau tiekėją)</p>
<p>Galima rikiuoti pagal kainą</p>

@if(filterFormIsVisible && kategorijos != null)
{
    <EditForm Model="model" OnValidSubmit="Filter" FormName="AtaskaitaForm">
        <div class="form-group">
            <label>
                Pasirinkite kategoriją:
            </label>
            <InputSelect @bind-Value="model.Kategorija" class="form-control" style="width:200px">
                @foreach (Kategorija kategorija in kategorijos)
                {
                    <option value="@kategorija.Pav">@kategorija.Pav</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>
                Pasirinkite lytį:
            </label>
            <InputSelect @bind-Value="model.Lytis" class="form-control" style="width:200px">
                @foreach (Lytis lytis in Enum.GetValues(typeof(Lytis)))
                {
                    <option value="@lytis">@lytis</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>
                Pasirinkite min kainą:
            </label>
            <InputNumber class="form-control" @bind-Value="@model.MinKaina" style="width:200px" />
        </div>

        <div class="form-group">
            <label>
                Pasirinkite max kainą:
            </label>
            <InputNumber class="form-control" @bind-Value="@model.MaxKaina" style="width:200px" />
        </div>
        <br/>
        <button type="submit">Kurti ataskaitą</button>
    </EditForm>
}
else if(topics != null)
{
    <p>@model.Kategorija</p>
    <p>@model.Lytis</p>
    <p>@model.MinKaina</p>
    <p>@model.MaxKaina</p>
    @foreach(AtaskaitaTopic topic in topics)
    {
        <h3>@topic.Subkategorija  |   @topic.Trikotazo_count</h3>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th scope="col">Pavadinimas</th>
                    <th scope="col">Kaina</th>
                    <th scope="col">Medžiaga</th>
                    <th scope="col">Dydis</th>
                    <th scope="col">Spalva</th>
                    <th scope="col">Kiekis</th>
                    <th scope="col">Tiekėjas</th>
                </tr>
            </thead>
            <tbody>
                @foreach(AtaskaitaEntry entry in entries[index++])
                {
                   <tr>
                       <td>@entry.Pavadinimas</td>
                       <td>@entry.Kaina</td>
                       <td>@entry.Medziaga</td>
                       <td>@entry.Dydis</td>
                       <td>@entry.Spalva</td>
                       <td>@entry.Kiekis</td>
                       <td>@entry.Tiekejas</td>
                   </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private bool filterFormIsVisible = true;
    private List<Kategorija> kategorijos;
    private List<AtaskaitaTopic> topics;
    private List<List<AtaskaitaEntry>> entries;
    public FilterModel model;
    private int index;

    protected override async Task OnInitializedAsync()
    {
        model = new FilterModel();
        kategorijos = await kategorijaRepository.GetAllAsync();
        model.Lytis = Lytis.moterims;
        model.Kategorija= kategorijos.First().Pav;
        entries = new List<List<AtaskaitaEntry>>();
        index = 0;
    }

    private async Task Filter()
    {
        if (model.MinKaina >= 0 && model.MinKaina <= model.MaxKaina)
        {
            filterFormIsVisible = false;
            topics = await ataskaitaRepository.GetAllTopics(model.Kategorija, model.Lytis, model.MinKaina, model.MaxKaina);
            foreach(AtaskaitaTopic topic in topics)
            {
                entries.Add(await GetEntriesForTopic(topic));
            }
        }
    }
    public async Task<List<AtaskaitaEntry>> GetEntriesForTopic(AtaskaitaTopic topic)
    {
        List<AtaskaitaEntry> res = await ataskaitaRepository.GetEntriesByTopic(topic.Subkategorija, model.Lytis, model.MinKaina, model.MaxKaina);
        return res;
    }

    public class FilterModel
    {
        public FilterModel()
        {
        }

        public FilterModel(Lytis lytis, string kategorija, float minKaina, float maxKaina)
        {
            this.Lytis = lytis;
            this.Kategorija = kategorija;
            this.MinKaina = minKaina;
            this.MaxKaina = maxKaina;
        }

        public Lytis Lytis { get; set; }
        public string Kategorija { get; set; }
        public float MinKaina { get; set; } = 0;
        public float MaxKaina { get; set; } = 100;
    }
}
