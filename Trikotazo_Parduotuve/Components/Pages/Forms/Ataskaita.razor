@using Trikotazo_Parduotuve.Repositories
@using Trikotazo_Parduotuve.Entities
@inject KategorijaRepository kategorijaRepository
@page "/Ataskaita"

<h3>Ataskaita</h3>
<p>Sudaro trikotažo ataskaitą, kurią filtruoja pagal  (Kategorija) kategoriją, (Subkategorija) lytį, (Trikotazas) max ir min kainos?</p>
<p>Galima rikiuoti pagal kainą</p>

@if(filterFormIsVisible && kategorijos != null)
{
    <EditForm Model="this" OnValidSubmit="Filter">
        <div class="form-group">
            <label>
                Pasirinkite kategoriją:
            </label>
            <InputSelect @bind-Value="kategorija.Pav" class="form-control" style="width:200px">
                @foreach (Kategorija kategorija in kategorijos)
                {
                    <option value="@kategorija.Pav">@kategorija.Pav</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>
                Pasirinkite lytį:
            </label>
            <InputSelect @bind-Value="lytis" class="form-control" style="width:200px">
                @foreach (Lytis lytis in Enum.GetValues(typeof(Lytis)))
                {
                    <option value="@lytis">@lytis</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>
                Pasirinkite min kainą:
            </label>
            <InputNumber class="form-control" @bind-Value="@minKaina" />
        </div>

        <div class="form-group">
            <label>
                Pasirinkite max kainą:
            </label>
            <InputNumber class="form-control" @bind-Value="@maxKaina" />
        </div>
    </EditForm>
}

@code {
    private bool filterFormIsVisible = true;
    private Lytis lytis;
    private Kategorija kategorija;
    private double minKaina;
    private double maxKaina;
    private List<Kategorija> kategorijos;

    protected override async Task OnInitializedAsync()
    {
        kategorija = new Kategorija();
        kategorijos = await kategorijaRepository.GetAllAsync();
    }

    private void Filter()
    {
        
    }
}
