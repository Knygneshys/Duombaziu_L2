@page "/SubkategorijaForm/{Pav}/{LytisPassed}"
@using Trikotazo_Parduotuve.Entities
@using Trikotazo_Parduotuve.Repositories
@inject NavigationManager navigationManager
@inject SubkategorijaRepository subkategorijaRepository
@inject KategorijaRepository kategorijaRepository;
@inject TrikotazasRepository trikotazasRepository;
@rendermode InteractiveServer
<h3>Subkategorija</h3>

@if(subkategorija is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="placeHolder" OnValidSubmit="UpdateDB" FormName="SubkategorijaForm">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>
                Pavadinimas: <b>@placeHolder.Pavadinimas</b>
            </label>
        </div>

        <div class="form-group">
            <label>Lytis: <b>@placeHolder.Lytis</b></label>
        </div>

        <div class="form-group">
            <label>
                Aprašymas:
            </label>
            <InputTextArea @bind-Value="placeHolder.Aprasymas" class="form-control" rows="4" style="width:500px" />
        </div>

        <div class="form-group">
            <label>
                Kategorija:
            </label>
            <InputSelect @bind-Value="placeHolder.Fk_KATEGORIJA" class="form-control" style="width:100px">
                @foreach (Kategorija kategorija in kategorijos)
                {
                    <option value="@kategorija.Pav">@kategorija.Pav</option>
                }
            </InputSelect>
        </div>
        <br/>
        <button type="submit">Save</button>
    </EditForm>
}
<br />
@if(trikotazai != null && trikotazai.Count > 0)
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th scope="col">Pavadinimas</th>
                <th scope="col">Kaina</th>
                <th scope="col">Medžiaga</th>
                <th scope="col">Dydis</th>
                <th scope="col">Spalva</th>
                <th scope="col">Kiekis</th>
                <th scope="col">Paskutinis atnaujinimas</th>
                <th scope="col">Subkategorija</th>
                <th scope="col">Lytis</th>
                <th scope="col">Tiekejas</th>
            </tr>
        </thead>
        <tbody>
            @foreach(Trikotazas trikotazas in trikotazai)
            {
                <tr>
                    <td>@trikotazas.Pavadinimas</td>
                    <td>@trikotazas.Kaina</td>
                    <td>@trikotazas.Medziaga</td>
                    <td>@trikotazas.Dydis</td>
                    <td>@trikotazas.Spalva</td>
                    <td>@trikotazas.Kiekis</td>
                    <td>@trikotazas.Paskutinis_atnaujinimas.ToShortDateString()</td>
                    <td>@trikotazas.Fk_SUBKATEGORIJA_pav</td>
                    <td>@trikotazas.Fk_SUBKATEGORIJA_lytis</td>
                    <td>@trikotazas.Fk_TIEKEJAS</td>
                    <td><button @onclick="()=>GoToTrikotazasForm(trikotazas)">Peržiūrėti</button></td>
                    <td><button @onclick="()=>DeleteTrikotazas(trikotazas)">Ištrinti</button></td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    [Parameter]
    public string Pav { get; set; }
    [Parameter]
    public string LytisPassed { get; set; }
    public Lytis lytis;
    public Subkategorija subkategorija;
    public Subkategorija placeHolder;
    public List<Kategorija> kategorijos;
    public List<Trikotazas> trikotazai;

    protected override async Task OnInitializedAsync()
    {
        kategorijos = await kategorijaRepository.GetAllAsync();
        Lytis.TryParse(LytisPassed, out lytis);
        subkategorija = await subkategorijaRepository.GetByKey(Pav, lytis);
        placeHolder = new Subkategorija(subkategorija);
        trikotazai = await trikotazasRepository.GetFilteredBySubkategorija(subkategorija.Pavadinimas, (int)subkategorija.Lytis);
    }

    public async Task UpdateDB()
    {
        await subkategorijaRepository.UpdateEntity(subkategorija.Pavadinimas, (int)subkategorija.Lytis, placeHolder);

        subkategorija = await subkategorijaRepository.GetByKey(placeHolder.Pavadinimas, placeHolder.Lytis);
        trikotazai = await trikotazasRepository.GetFilteredBySubkategorija(placeHolder.Pavadinimas, (int)placeHolder.Lytis);

        navigationManager.NavigateTo($"/SubkategorijaForm/{placeHolder.Pavadinimas}/{placeHolder.Lytis}", forceLoad: true);
    }

    public void GoToTrikotazasForm(Trikotazas trikotazas)
    {
        navigationManager.NavigateTo($"/TrikotazasForm/{trikotazas.Id}");
    }

    public void DeleteTrikotazas(Trikotazas trikotazas)
    {
        
    }
}