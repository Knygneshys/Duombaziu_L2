@page "/SubkategorijaList/{Page:int}"
@using Trikotazo_Parduotuve.Entities
@using Trikotazo_Parduotuve.Repositories
@inject SubkategorijaRepository subkategorijaRepository
@inject KategorijaRepository kategorijaRepository;
@inject F1Repository f1Repository;
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<h3>Subkategorijos</h3>


@if (f1Items is null)
{
    <h2>Loading...</h2>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th scope="col">Pavadinimas</th>
                <th scope="col">Lytis</th>
                <th scope="col">Aprašymas</th>
                <th scope="col">Kategorija</th>
                <th scope="col">Kategorijos aprašymas</th>
            </tr>
        </thead>
        <tbody>
            @foreach (F1 f1 in f1Items)
            {
                <tr>
                    <td>@f1.Pavadinimas</td>
                    <td>@f1.Lytis</td>
                    <td>@f1.Aprasymas</td>
                    <td>@f1.Pav</td>
                    <td>@f1.Aprasas</td>
                    <td><button @onclick="()=>DeleteSubkategorija(f1)">Šalinti</button></td>
                    <td><button @onclick="()=>GoToSubkategorijaForm(f1)">Redaguoti</button></td>
                </tr>
            }
        </tbody>
    </table>
}
<br/>

<div style="float:left;width:100%;text-align:center">
    <button @onclick="()=>GoToPage(Page-1)">Previous</button>
    <span>@Page</span>
    <button @onclick="()=>GoToPage(Page+1)">Next</button>
</div>
<br/>
<br/>

<button @onclick="() => GoToSubkategorijaForm(null)">Pridėti naują subkategoriją</button>

@if (deletionWarningIsVisible)
{
    <h3 style="color:red;margin-top:10px">This item has tables relating to it!</h3>
}

@code {
    [Parameter]
    public int Page { get; set; }
    private List<F1> f1Items;
    private bool deletionWarningIsVisible = false;
    const int CHUNK_SIZE = 8;

    protected override async Task OnInitializedAsync()
    {
        // f1Items = await f1Repository.GetAllAsync();
        f1Items = await f1Repository.GetChunk(CHUNK_SIZE, Page * CHUNK_SIZE - CHUNK_SIZE);
        if(f1Items.Count < 1)
        {
            navigationManager.NavigateTo($"/SubkategorijaList/{Page - 1}");
        }
    }

    public void GoToSubkategorijaForm(F1 joinedTables)
    {
        if (joinedTables is null)
        {
            navigationManager.NavigateTo($"/SubkategorijaForm/nauja/nauja");
        } 
        else
        {
            navigationManager.NavigateTo($"/SubkategorijaForm/{joinedTables.Pavadinimas}/{joinedTables.Lytis}");
        }
    }

    public void GoToPage(int page)
    {
        if(page > 0)
        {
            navigationManager.NavigateTo($"/SubkategorijaList/{page}");
        }
    }


    public async Task DeleteSubkategorija(F1 joinedTables)
    {
        try
        {
            deletionWarningIsVisible = false;
            await subkategorijaRepository.Remove(joinedTables.Pavadinimas, (int)joinedTables.Lytis);
            navigationManager.NavigateTo(navigationManager.Uri, true);
        } catch (Exception e)
        {
            deletionWarningIsVisible = true;
        }
    }
}