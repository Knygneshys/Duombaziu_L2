@page "/SubkategorijaList"
@using Trikotazo_Parduotuve.Entities
@using Trikotazo_Parduotuve.Repositories
@inject SubkategorijaRepository subkategorijaRepository
@inject KategorijaRepository kategorijaRepository;
@inject F1Repository f1Repository;
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<h3>Subkategorijos</h3>


@if (subkategorijos is null)
{
    <h2>Loading...</h2>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th scope="col">Pavadinimas</th>
                <th scope="col">Lytis</th>
                <th scope="col">Aprašymas</th>
                <th scope="col">Kategorija</th>
                <th scope="col">Kategorijos aprašymas</th>
            </tr>
        </thead>
        <tbody>
            @foreach (F1 f1 in f1Items)
            {
                <tr>
                    <td>@f1.Pavadinimas</td>
                    <td>@f1.Lytis</td>
                    <td>@f1.Aprasymas</td>
                    <td>@f1.Pav</td>
                    <td>@f1.Aprasas</td>
                    <td><button @onclick="()=>DeleteSubkategorija(f1)">Šalinti</button></td>
                    <td><button @onclick="()=>GoToSubkategorijaForm(f1)">Redaguoti</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<F1> f1Items;
    public List<Subkategorija> subkategorijos;

    protected override async Task OnInitializedAsync()
    {
        f1Items = await f1Repository.GetAllAsync();
        subkategorijos = await subkategorijaRepository.GetAllAsync();
    }

    public void GoToSubkategorijaForm(F1 subkategorija)
    {
        navigationManager.NavigateTo($"/SubkategorijaForm/{subkategorija.Pavadinimas}/{subkategorija.Lytis}");
    }


    public async Task DeleteSubkategorija(F1 subkategorija)
    {
        // await subkategorijaRepository.Remove(subkategorija);
        // subkategorijos.Remove(subkategorija);
    }
}