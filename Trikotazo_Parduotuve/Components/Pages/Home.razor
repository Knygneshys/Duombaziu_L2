@page "/"
@using Trikotazo_Parduotuve.Entities
@using Trikotazo_Parduotuve.Repositories
@inject KategorijaRepository kategorijaRepository;
@inject SubkategorijaRepository subkategorijaRepository;
@inject TrikotazasRepository trikotazasRepository;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (kategorijos is null)
{
    <p>Loading...</p>
}
else
{
    <p>Kategorijos:</p>
    foreach(Kategorija kategorija in kategorijos)
    {
        <h3>@kategorija.Pavadinimas</h3>
        <p>@kategorija.Aprasymas</p>
    }
}

@if(subkategorijos is null)
{
    <p>Loading...</p>
}
else
{
    <p>Subkategorijos:</p>
    foreach(Subkategorija subkategorija in subkategorijos)
    {
        <h3>@subkategorija.pavadinimas</h3>
        <p>@subkategorija.lytis</p>
        <p>@subkategorija.aprasymas</p>
        <p>@subkategorija.kategorija</p>
    }
}

@if(visible)
{
    <p>VEIKIA</p>
}

<button @onclick=Work >Spausk</button>

@code{
    private List<Kategorija> kategorijos;
    private List<Subkategorija> subkategorijos;
    private List<Trikotazas> trikotazai;
    public bool visible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadKategorijas();
        await LoadSubkategorijas();
        await LoadTrikotazus();
    }

    private async Task LoadKategorijas()
    {
        kategorijos = await kategorijaRepository.GetAllAsync();
    }

    private async Task LoadSubkategorijas()
    {
        subkategorijos = await subkategorijaRepository.GetAllAsync();
    }

    private async Task LoadTrikotazus()
    {
        trikotazai = await trikotazasRepository.GetAllAsync();
    }

    public void Work()
    {
        visible = true;
    }
}